{"version":3,"sources":["App.module.scss","AnswerModal/AnswerModal.module.scss","QuestionTile/QuestionTile.module.scss","LoadingScreen/LoadingScreen.module.scss","store/loading_screen/selectors.js","LoadingScreen/index.jsx","store/quiz/action-types.js","store/quiz/selectors.js","QuestionTile/index.jsx","store/quiz/actions.js","AnswerModal/index.jsx","App.jsx","store/loading_screen/actions.js","store/loading_screen/action-types.js","Root.jsx","serviceWorker.js","store/quiz/reducers.js","store/loading_screen/reducers.js","store/index.js","index.js"],"names":["module","exports","getShowLoadingScreen","state","loadingScreen","showLoadingScreen","connect","className","styles","getQuestion","index","quiz","questions","getAnswerToView","answerToView","getNumberOfQuestions","length","ownProps","question","dispatch","showQuizAnswer","type","data","quizTile","toggleView","onClick","answer","hideQuizAnswer","AnswerModal","modalContent","modalHeader","modalBody","numberOfQuestions","loadQuizData","a","useEffect","App","header","Array","map","_","tileWrapper","key","Root","store","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","answers","reducer","action","composeEnhancers","composeWithDevTools","middleware","thunk","createStore","combineReducers","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.69599971.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3xs9d\",\"header\":\"App_header__O97ys\",\"quiz\":\"App_quiz__1SIzF\",\"tileWrapper\":\"App_tileWrapper__2lBCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerModal\":\"AnswerModal_AnswerModal__1uxh8\",\"modalContent\":\"AnswerModal_modalContent__2rg2A\",\"modalHeader\":\"AnswerModal_modalHeader__3Ub9L\",\"modalBody\":\"AnswerModal_modalBody__2Hp5D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quizTile\":\"QuestionTile_quizTile__1f-l5\",\"question\":\"QuestionTile_question__sJd7g\",\"answer\":\"QuestionTile_answer__FSWaS\",\"toggleView\":\"QuestionTile_toggleView__19qHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingScreen\":\"LoadingScreen_loadingScreen__2MQRL\"};","export function getShowLoadingScreen(state) {\r\n\treturn state.loadingScreen.showLoadingScreen;\r\n}","import React from \"react\";\r\nimport styles from \"./LoadingScreen.module.scss\";\r\nimport { getShowLoadingScreen } from \"../store/loading_screen/selectors\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst LoadingScreen = ({showLoadingScreen}) => {\r\n\tif(showLoadingScreen) {\r\n\t\treturn (\r\n\t\t\t<div className={styles.loadingScreen}>\r\n\t\t\t\tLoading...\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tshowLoadingScreen: getShowLoadingScreen(state)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(LoadingScreen);","export const LOAD_QUIZ_DATA = \"load_quiz_data\";\r\nexport const VIEW_QUIZ_ANSWER = \"view_quiz_answer\";\r\nexport const HIDE_QUIZ_ANSWER = \"hide_quiz_answer\";","export function getQuestion(state, index) {\r\n\treturn state.quiz.questions[index];\r\n}\r\nexport function getAnswer(state, index) {\r\n\treturn state.quiz.answers[index];\r\n}\r\nexport function getAnswerToView(state) {\r\n\treturn state.quiz.answerToView\r\n}\r\n\r\nexport function getNumberOfQuestions(state){\r\n\treturn state.quiz.questions.length;\r\n}","import React from \"react\";\r\nimport styles from \"./QuestionTile.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {  getQuestion } from \"../store/quiz/selectors\";\r\nimport { showQuizAnswer } from \"../store/quiz/actions\";\r\n\r\nconst QuizTile = ({question, index, showQuizAnswer}) => {\r\n\treturn (\r\n\t\t<div className={styles.quizTile}>\r\n\t\t\t<span className={styles.question}>{question}</span>\r\n\t\t\t<div className={styles.toggleView} onClick={() => showQuizAnswer(index)}>\r\n\t\t\t\t<span>View Answer</span>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n\tconst {index} = ownProps;\r\n\treturn {\r\n\t\tquestion: getQuestion(state, index)\r\n\t}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tshowQuizAnswer: index => dispatch(showQuizAnswer(index))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizTile);\r\n\r\n","import { showLoadingScreen, hideLoadingScreen } from \"../loading_screen/actions\";\r\nimport { LOAD_QUIZ_DATA, VIEW_QUIZ_ANSWER, HIDE_QUIZ_ANSWER } from \"./action-types\";\r\nimport data from \"../../data/quiz.json\"\r\n\r\nexport function loadQuizData() {\r\n\treturn async dispatch => {\r\n\t\tdispatch(showLoadingScreen());\r\n\t\t// if we want to fetch data from external source fetch here\r\n\t\t// const data = await fetch(\"/citizenship-practise/data.json\").then(data => data.json())\r\n\t\tdispatch ({\r\n\t\t\ttype: LOAD_QUIZ_DATA,\r\n\t\t\tdata\r\n\t\t})\r\n\t\tdispatch(hideLoadingScreen());\r\n\t}\r\n}\r\n\r\nexport function showQuizAnswer(index) {\r\n\treturn {\r\n\t\ttype: VIEW_QUIZ_ANSWER,\r\n\t\tdata: index\r\n\t}\r\n}\r\n\r\nexport function hideQuizAnswer() {\r\n\treturn {\r\n\t\ttype: HIDE_QUIZ_ANSWER\r\n\t}\r\n}","import React from \"react\";\r\nimport styles from \"./AnswerModal.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAnswerToView } from \"../store/quiz/selectors\";\r\nimport { hideQuizAnswer } from \"../store/quiz/actions\";\r\n\r\nconst AnswerModal = ({answer, hideQuizAnswer}) => {\r\n\tif(answer) {\r\n\t\treturn (\r\n\t\t\t<div className={styles.AnswerModal}>\r\n\t\t\t\t<div className={styles.modalContent}>\r\n\t\t\t\t\t<div className={styles.modalHeader}>\r\n\t\t\t\t\t\t<span onClick={() => hideQuizAnswer()}>X</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<span className={styles.modalBody}>\r\n\t\t\t\t\t\t{answer}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tanswer: getAnswerToView(state)\r\n\t}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\thideQuizAnswer: () => dispatch(hideQuizAnswer())\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerModal);","import React, { useEffect, Fragment } from 'react';\r\nimport styles from './App.module.scss';\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\n\r\nimport { loadQuizData } from \"./store/quiz/actions\";\r\nimport { getNumberOfQuestions } from \"./store/quiz/selectors\";\r\nimport { connect } from 'react-redux';\r\nimport QuizTile from './QuestionTile';\r\nimport AnswerModal from './AnswerModal';\r\n\r\nfunction App({loadQuizData, numberOfQuestions}) {\r\n\tuseEffect(() => {\r\n\t\tloadQuizData();\r\n\t}, [loadQuizData])\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className={styles.App}>\r\n\t\t\t\t<h1 className={styles.header}>\r\n\t\t\t\t\tCitizenship Practise\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className={styles.quiz}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t[...Array(numberOfQuestions)].map((_, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div className={styles.tileWrapper} key={index}>\r\n\t\t\t\t\t\t\t \t\t<QuizTile index={index} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<AnswerModal />\r\n\t\t\t</div>\r\n\t\t\t<LoadingScreen/>\r\n\t\t</Fragment>\r\n\t);\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tnumberOfQuestions: getNumberOfQuestions(state)\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tloadQuizData: () => dispatch(loadQuizData())\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\"\r\n\r\nexport function showLoadingScreen () {\r\n\treturn {\r\n\t\ttype: SHOW_LOADING_SCREEN\r\n\t}\r\n}\r\nexport function hideLoadingScreen () {\r\n\treturn {\r\n\t\ttype: HIDE_LOADING_SCREEN\r\n\t}\r\n}","export const SHOW_LOADING_SCREEN= \"show_loading_screen\";\r\nexport const HIDE_LOADING_SCREEN= \"hide_loading_screen\";","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\nimport App from \"./App\"\r\n\r\nconst Root = ({store}) => {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router>\r\n\t\t\t\t<Route path=\"/\" component={App}/>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOAD_QUIZ_DATA, VIEW_QUIZ_ANSWER, HIDE_QUIZ_ANSWER } from \"./action-types\";\r\n\r\nconst initialState = {\r\n\tquestions: [],\r\n\tanswers: [],\r\n\tanswerToView: null\r\n};\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase LOAD_QUIZ_DATA:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestions: [...action.data.map(data => data.question)],\r\n\t\t\t\tanswers: [...action.data.map(data => data.answer)],\r\n\t\t\t}\r\n\t\tcase VIEW_QUIZ_ANSWER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswerToView: state.answers[action.data]\r\n\t\t\t}\r\n\t\tcase HIDE_QUIZ_ANSWER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswerToView: null\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\";\r\n\r\nconst initialState = {\r\n\tshowLoadingScreen: false\r\n};\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase SHOW_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: true\r\n\t\t\t}\r\n\t\tcase HIDE_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: false\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import quiz  from \"./quiz/reducers\";\r\nimport loadingScreen from \"./loading_screen/reducers\"\r\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\nconst middleware = [\r\n\tthunk\r\n]\r\n\r\nexport const store = createStore(\r\n\tcombineReducers({\r\n\t\tquiz,\r\n\t\tloadingScreen\r\n\t}),\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(...middleware)\r\n\t)\r\n) \r\n\r\n// export store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Root from './Root.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\n\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
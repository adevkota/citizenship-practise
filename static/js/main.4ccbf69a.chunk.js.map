{"version":3,"sources":["App.module.scss","QuizTile/QuizTile.module.scss","LoadingScreen/LoadingScreen.module.scss","store/loading_screen/selectors.js","LoadingScreen/index.jsx","store/quiz/action-types.js","store/quiz/selectors.js","QuizTile/index.jsx","App.jsx","store/quiz/actions.js","store/loading_screen/actions.js","store/loading_screen/action-types.js","Root.jsx","serviceWorker.js","store/quiz/reducers.js","store/loading_screen/reducers.js","store/index.js","index.js"],"names":["module","exports","getShowLoadingScreen","state","loadingScreen","showLoadingScreen","connect","className","styles","getQuestion","index","quiz","question","getAnswer","answer","getNumberOfQuestions","length","initialState","showAnswer","showQuestion","reducer","action","console","log","ownProps","useReducer","dispatch","quizTile","toggleView","onClick","numberOfQuestions","loadQuizData","a","type","data","useEffect","App","header","Array","map","_","tileWrapper","key","Root","store","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","composeEnhancers","composeWithDevTools","middleware","thunk","createStore","combineReducers","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ccbf69a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3xs9d\",\"header\":\"App_header__O97ys\",\"quiz\":\"App_quiz__1SIzF\",\"tileWrapper\":\"App_tileWrapper__2lBCn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quizTile\":\"QuizTile_quizTile__3I4lJ\",\"question\":\"QuizTile_question__3ufm8\",\"answer\":\"QuizTile_answer__1M7nl\",\"toggleView\":\"QuizTile_toggleView__11aKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingScreen\":\"LoadingScreen_loadingScreen__2MQRL\"};","export function getShowLoadingScreen(state) {\r\n\treturn state.loadingScreen.showLoadingScreen;\r\n}","import React from \"react\";\r\nimport styles from \"./LoadingScreen.module.scss\";\r\nimport { getShowLoadingScreen } from \"../store/loading_screen/selectors\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst LoadingScreen = ({showLoadingScreen}) => {\r\n\tif(showLoadingScreen) {\r\n\t\treturn (\r\n\t\t\t<div className={styles.loadingScreen}>\r\n\t\t\t\tLoading...\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tshowLoadingScreen: getShowLoadingScreen(state)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(LoadingScreen);","export const LOAD_QUIZ_DATA= \"load_quiz_data\";","export function getQuestion(state, index) {\r\n\treturn state.quiz[index].question;\r\n}\r\nexport function getAnswer(state, index) {\r\n\treturn state.quiz[index].answer;\r\n}\r\n\r\nexport function getNumberOfQuestions(state){\r\n\treturn state.quiz.length;\r\n}","import React, { useReducer } from \"react\";\r\nimport styles from \"./QuizTile.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAnswer, getQuestion } from \"../store/quiz/selectors\";\r\n\r\n\r\nconst ACTION_TYPE_TOGGLE_QUESTION_ANSWER_VIEW = \"toggle_question_answer_view\";\r\n\r\nconst initialState = {\r\n\tshowAnswer: false,\r\n\tshowQuestion: true\r\n}\r\n\r\nconst reducer = ({...state}, action) => {\r\n\tconsole.log(action)\r\n\tswitch(action) {\r\n\t\tcase ACTION_TYPE_TOGGLE_QUESTION_ANSWER_VIEW:\r\n\t\t\treturn {\r\n\t\t\t\tshowAnswer: !state.showAnswer,\r\n\t\t\t\tshowQuestion: !state.showQuestion\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn initialState;\r\n\t}\r\n}\r\nconst QuizTile = ({question, answer}) => {\r\n\tconst [state, dispatch] = useReducer(reducer, initialState);\r\n\treturn (\r\n\t\t<div className={styles.quizTile}>\r\n\t\t\t{\r\n\t\t\t\tstate.showQuestion?\r\n\t\t\t\t\t<span className={styles.question}>{question}</span>\r\n\t\t\t\t:\"\"\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tstate.showAnswer?\r\n\t\t\t\t\t<span className={styles.answer}>{answer}</span>\r\n\t\t\t\t:\"\"\r\n\t\t\t}\r\n\t\t\t<div className={styles.toggleView} onClick={() => dispatch(ACTION_TYPE_TOGGLE_QUESTION_ANSWER_VIEW)}>\r\n\t\t\t\t<span>View {state.showQuestion? \"Answer\" : \"Question\"}</span>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n\tconst {index} = ownProps;\r\n\treturn {\r\n\t\tquestion: getQuestion(state, index),\r\n\t\tanswer: getAnswer(state, index)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(QuizTile);\r\n\r\n","import React, { useEffect, Fragment } from 'react';\nimport styles from './App.module.scss';\nimport LoadingScreen from './LoadingScreen';\n\n\nimport { loadQuizData } from \"./store/quiz/actions\";\nimport { getNumberOfQuestions } from \"./store/quiz/selectors\";\nimport { connect } from 'react-redux';\nimport QuizTile from './QuizTile';\n\nfunction App({loadQuizData, numberOfQuestions}) {\n\tuseEffect(() => {\n\t\tloadQuizData();\n\t}, [loadQuizData])\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={styles.App}>\n\t\t\t\t<h1 className={styles.header}>\n\t\t\t\t\tCitizenship Practise\n\t\t\t\t</h1>\n\t\t\t\t<div className={styles.quiz}>\n\t\t\t\t\t{\n\t\t\t\t\t\t[...Array(numberOfQuestions)].map((_, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className={styles.tileWrapper} key={index}>\n\t\t\t\t\t\t\t \t\t<QuizTile index={index} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<LoadingScreen/>\n\t\t</Fragment>\n\t);\n}\n\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tnumberOfQuestions: getNumberOfQuestions(state)\n\t}\n}\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tloadQuizData: () => dispatch(loadQuizData())\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { showLoadingScreen, hideLoadingScreen } from \"../loading_screen/actions\";\r\nimport { LOAD_QUIZ_DATA } from \"./action-types\";\r\nimport data from \"../../data/quiz.json\"\r\n\r\nexport function loadQuizData() {\r\n\treturn async dispatch => {\r\n\t\tdispatch(showLoadingScreen());\r\n\t\t// if we want to fetch data from external source fetch here\r\n\t\t// const data = await fetch(\"/citizenship-practise/data.json\").then(data => data.json())\r\n\t\tdispatch ({\r\n\t\t\ttype: LOAD_QUIZ_DATA,\r\n\t\t\tdata\r\n\t\t})\r\n\t\tdispatch(hideLoadingScreen());\r\n\t}\r\n}","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\"\r\n\r\nexport function showLoadingScreen () {\r\n\treturn {\r\n\t\ttype: SHOW_LOADING_SCREEN\r\n\t}\r\n}\r\nexport function hideLoadingScreen () {\r\n\treturn {\r\n\t\ttype: HIDE_LOADING_SCREEN\r\n\t}\r\n}","export const SHOW_LOADING_SCREEN= \"show_loading_screen\";\r\nexport const HIDE_LOADING_SCREEN= \"hide_loading_screen\";","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\nimport App from \"./App\"\r\n\r\nconst Root = ({store}) => {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router>\r\n\t\t\t\t<Route path=\"/\" component={App}/>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOAD_QUIZ_DATA } from \"./action-types\";\r\n\r\nconst initialState = [];\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase LOAD_QUIZ_DATA:\r\n\t\t\treturn [...action.data];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\";\r\n\r\nconst initialState = {\r\n\tshowLoadingScreen: false\r\n};\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase SHOW_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: true\r\n\t\t\t}\r\n\t\tcase HIDE_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: false\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import quiz  from \"./quiz/reducers\";\r\nimport loadingScreen from \"./loading_screen/reducers\"\r\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\nconst middleware = [\r\n\tthunk\r\n]\r\n\r\nexport const store = createStore(\r\n\tcombineReducers({\r\n\t\tquiz,\r\n\t\tloadingScreen\r\n\t}),\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(...middleware)\r\n\t)\r\n) \r\n\r\n// export store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Root from './Root.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\n\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
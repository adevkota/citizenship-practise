{"version":3,"sources":["LoadingScreen/LoadingScreen.module.scss","store/loading_screen/selectors.js","LoadingScreen/index.js","App.js","store/quiz/actions.js","store/loading_screen/actions.js","store/loading_screen/action-types.js","store/quiz/action-types.js","Root.js","serviceWorker.js","store/quiz/reducers.js","store/loading_screen/reducers.js","store/index.js","index.js"],"names":["module","exports","getShowLoadingScreen","state","loadingScreen","showLoadingScreen","connect","className","styles","dispatch","loadQuizData","a","type","fetch","then","data","json","useEffect","App","Root","store","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","reducer","action","composeEnhancers","composeWithDevTools","middleware","thunk","createStore","combineReducers","quiz","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b80ed7c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingScreen\":\"LoadingScreen_loadingScreen__2MQRL\"};","export function getShowLoadingScreen(state) {\r\n\treturn state.loadingScreen.showLoadingScreen;\r\n}","import React from \"react\";\r\nimport styles from \"./LoadingScreen.module.scss\";\r\nimport { getShowLoadingScreen } from \"../store/loading_screen/selectors\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst LoadingScreen = ({showLoadingScreen}) => {\r\n\tif(showLoadingScreen) {\r\n\t\treturn (\r\n\t\t\t<div className={styles.loadingScreen}>\r\n\t\t\t\tLoading...\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tshowLoadingScreen: getShowLoadingScreen(state)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(LoadingScreen);","import React, { useEffect, Fragment } from 'react';\nimport styles from './App.module.scss';\nimport { loadQuizData } from \"./store/quiz/actions\";\nimport { connect } from 'react-redux';\nimport LoadingScreen from './LoadingScreen';\n\nfunction App({loadQuizData}) {\n\tuseEffect(() => {\n\t\tloadQuizData();\n\t}, [loadQuizData])\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={styles.App}>\n\t\t\t\t<header className=\"styles.App-header\">\n\t\t\t\t\ta\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t\t<LoadingScreen/>\n\t\t</Fragment>\n\t);\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tloadQuizData: () => dispatch(loadQuizData())\n\t}\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { showLoadingScreen, hideLoadingScreen } from \"../loading_screen/actions\";\r\nimport { LOAD_QUIZ_DATA } from \"./action-types\";\r\n\r\nexport function loadQuizData() {\r\n\treturn async dispatch => {\r\n\t\tdispatch(showLoadingScreen());\r\n\t\tconst data = await fetch(\"/data.json\").then(data => data.json())\r\n\t\tdispatch ({\r\n\t\t\ttype: LOAD_QUIZ_DATA,\r\n\t\t\tdata\r\n\t\t})\r\n\t\tdispatch(hideLoadingScreen());\r\n\t}\r\n}","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\"\r\n\r\nexport function showLoadingScreen () {\r\n\treturn {\r\n\t\ttype: SHOW_LOADING_SCREEN\r\n\t}\r\n}\r\nexport function hideLoadingScreen () {\r\n\treturn {\r\n\t\ttype: HIDE_LOADING_SCREEN\r\n\t}\r\n}","export const SHOW_LOADING_SCREEN= \"show_loading_screen\";\r\nexport const HIDE_LOADING_SCREEN= \"hide_loading_screen\";","export const LOAD_QUIZ_DATA= \"load_quiz_data\";","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\nimport App from \"./App\"\r\n\r\nconst Root = ({store}) => {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router>\r\n\t\t\t\t<Route path=\"/\" component={App}/>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { LOAD_QUIZ_DATA } from \"./action-types\";\r\n\r\nconst initialState = [];\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase LOAD_QUIZ_DATA:\r\n\t\t\treturn [...action.data];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import { SHOW_LOADING_SCREEN, HIDE_LOADING_SCREEN } from \"./action-types\";\r\n\r\nconst initialState = {\r\n\tshowLoadingScreen: false\r\n};\r\n\r\nconst reducer = (state= initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase SHOW_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: true\r\n\t\t\t}\r\n\t\tcase HIDE_LOADING_SCREEN:\r\n\t\t\treturn {\r\n\t\t\t\tshowLoadingScreen: false\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n}\r\nexport default reducer;","import quiz  from \"./quiz/reducers\";\r\nimport loadingScreen from \"./loading_screen/reducers\"\r\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\nconst middleware = [\r\n\tthunk\r\n]\r\n\r\nexport const store = createStore(\r\n\tcombineReducers({\r\n\t\tquiz,\r\n\t\tloadingScreen\r\n\t}),\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(...middleware)\r\n\t)\r\n) \r\n\r\n// export store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\n\nReactDOM.render(<Root store={store}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}